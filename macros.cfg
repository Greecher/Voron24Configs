#####################################################################
# 	Knomi Related Macros
#####################################################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False

gcode:
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
  BED_MESH_CALIBRATE_BASE           
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
  
## ended up modding homing override to kick those values out, as ho is a G28 rename and caused glitches...
# added this to homing_override in macros in printer.cfg file
#  _status_homing
#  {% set homing = True %}
#...
#  {% set homing = False %}
#  _status_ready
# 
# now as that contails references to the neopixel status changes, I may move there if it doesn't work
# complete hack at this point, as I don't know if the homing flag will be valid for the knomi in the end

#[gcode_macro homing_override]
#rename_existing: homing_override_base
#variable_homing:False

#gcode:
#  SET_GCODE_VARIABLE MACRO=homing_override VARIABLE=homing VALUE=True
#  homing_override_base           
#  SET_GCODE_VARIABLE MACRO=homing_override VARIABLE=homing VALUE=False

#####################################################################
# 	Filament Related Macros
#####################################################################

[gcode_macro FRONT_AND_CENTRE]
gcode:
    # Moving to Front
    G90
    G1 X150 Y10 Z100 F3600           ; move nozzle front and centre


#####################################################################
# 	Filament Runout Sensors
#####################################################################

[filament_switch_sensor REVO_FRS]
switch_pin: SB2209: PB5
pause_on_runout: false ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    M117 Below Extruder PB5 Runout Detected!
    M600

[filament_switch_sensor TOOLHEAD_FRS]
switch_pin: SB2209: PB7
pause_on_runout: false ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    M117 Above Extruder PB6 Runout Detected!
    M600
    
[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=REVO_FRS ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=TOOLHEAD_FRS ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=REVO_FRS ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=TOOLHEAD_FRS ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor 
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=REVO_FRS ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=TOOLHEAD_FRS ENABLE=0 ; Put your filament sensor's name after SENSOR=

#####################################################################
# 	Filament change macro M600
#####################################################################

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=STATE_M600
    
    # remembers the position
    # fluidd annoyingly redefines this macro to retract and park the toolhead at the rear
    PAUSE  
    
    # safe park coords
    {% set th = printer.toolhead %}
    {% set park_x = 220 %}
    {% set park_y = 10 %}
    {% set park_z = [th.position.z + 20, th.axis_maximum.z]|min %}
    {% set park_feedrate = 60 * 60 %}
    
    # retract at 50mm/sec
    G91
    G1 E-1 F1000
    
    # park toolhead
    G90
    G0 X{park_x} Y{park_y} Z{park_z} F{park_feedrate}
    
    # unload 60mm of filament
    G91
    G1 E-60 F1200
    
    # ask the waiter for a refill
    M117 Refill please
    
    RESTORE_GCODE_STATE NAME=STATE_M600
    
[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E70 F1200 # fast-load
    G1 E30 F150 # purge
    M117 Filament Loaded
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E25 F150 # purge
    G1 E-100 F1200 # fast-unload
    M117 Filament Unloaded
    RESTORE_GCODE_STATE NAME=unload_state   
    
#####################################################################
# 	Neopixel Related Macros
#####################################################################
[neopixel sb_leds]
pin: SB2209: PD3
chain_count: 3
color_order: GRBW
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5
initial_WHITE: 0.5



[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro logo_on]
gcode:   
    _set_sb_leds_by_name leds="logo" color="standby" transmit=1

[gcode_macro logo_off]
gcode:
    _set_sb_leds_by_name leds="logo" color="off" transmit=1

[gcode_macro nozzle_on]
gcode:
    _set_sb_leds_by_name leds="nozzle" color="on" transmit=1

[gcode_macro nozzle_off]
gcode:
    _set_sb_leds_by_name leds="nozzle" color="off" transmit=1

[gcode_macro status_off]
gcode:
    logo_off
    nozzle_off

[gcode_macro _status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro _status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    nozzle_on

[gcode_macro _status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro _status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    nozzle_on

[gcode_macro _status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    nozzle_on

[gcode_macro _status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    nozzle_on

[gcode_macro _status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    nozzle_on

[gcode_macro _status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    nozzle_on

[gcode_macro _status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    nozzle_on


#####################################################################
# 	Nozzle Scrub Related Macros
#####################################################################

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 236
variable_start_y: 304
variable_end_y: 310
variable_start_z: -0.5
variable_wipe_dist: 35
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20
gcode:
 _CG28
 G90
 G1 X236 Y290 Z5 F6000
 #Extrude a little
#M83
#G1 E10 F300
#G4 P2000                                          # Wait 2sec

## Move nozzle to start position
 G90
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
  G1 X{start_x + wipe_dist} Y{end_y} F{wipe_spd * 60}
  G1 X{start_x} Y{start_y} F{wipe_spd * 60}
 {% endfor %}

## Raise nozzle first
 G1 Z{raise_distance}
## purposefully move Y away from back to mid, then move x to center of bed 
 G1 Y{150} X{150} F{wipe_spd * 30}

## Fin

#check if homed, else home it.
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    